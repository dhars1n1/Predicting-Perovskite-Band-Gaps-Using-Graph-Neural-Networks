import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt

# Load dataset
df = pd.read_csv("perovskite_numeric_encoded.csv")

# Create graph
G = nx.Graph()

# Add nodes + edges
for _, row in df.iterrows():
    ref_id = row['Ref_ID']
    a = str(row['Perovskite_composition_a_ions'])
    b = str(row['Perovskite_composition_b_ions'])
    c = str(row['Perovskite_composition_c_ions'])

    # Handle multiple ions in C column (like "Br; I")
    c_split = [x.strip() for x in c.split(";")] if ";" in c else [c]

    # Add nodes
    G.add_node(a, type='A')
    G.add_node(b, type='B')
    for c_elem in c_split:
        G.add_node(c_elem, type='C')

    # Add edges with compound label = Ref_ID
    for c_elem in c_split:
        G.add_edge(a, b, label=f"Ref {ref_id}")
        G.add_edge(b, c_elem, label=f"Ref {ref_id}")
        G.add_edge(a, c_elem, label=f"Ref {ref_id}")

# Choose layout (spread out nodes)
pos = nx.kamada_kawai_layout(G)   # better spacing

# Color nodes based on type
color_map = []
for node, data in G.nodes(data=True):
    if data.get('type') == 'A':
        color_map.append('skyblue')
    elif data.get('type') == 'B':
        color_map.append('lightgreen')
    elif data.get('type') == 'C':
        color_map.append('salmon')
    else:
        color_map.append('gray')

# Draw graph
plt.figure(figsize=(20, 20))
nx.draw_networkx_nodes(G, pos, node_color=color_map, node_size=180, alpha=0.9)
nx.draw_networkx_labels(G, pos, font_size=10, font_weight="bold")
nx.draw_networkx_edges(G, pos, width=1.0, alpha=0.6, edge_color="gray")

# OPTIONAL: uncomment if you want to see Ref_ID edge labels
edge_labels = {(u, v): d['label'] for u, v, d in G.edges(data=True)}
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=7)

plt.title("Perovskite Element Graph", fontsize=14, fontweight="bold")
plt.axis("off")
plt.show()


